syntax = "proto3";

package protocol;

message GameState {
    EGamePhase phase = 1;
    State initial_state = 2;
    State start_state = 3;
    repeated Round rounds = 4;
    oneof game_result {
        GameResultDraw draw = 5;
        GameResultWin win = 6;
    }
}

enum EGamePhase {
    INITIAL = 0;
    PREPARATION = 1;
    RUNNING = 2;
    ENDED = 3;
}

message GameResultDraw {
    repeated uint32 player_ids = 1;
}

message GameResultWin {
    uint32 player_id = 1;
}

message Round {
    uint32 id = 1;
    ERoundPhase phase = 2;
    State state = 3;
}

enum ERoundPhase {
    INITIALIZATION = 0;
    PROGRAMMING = 1;
    EXECUTION = 2;
    CLEANUP = 3;
    DONE = 4;
}

message State {
    Board board = 1;
    repeated Player players = 2;
    repeated MoveCard cards = 3;
}

message Board {
    repeated Tile tiles = 1;
    int32 size_x = 2;
    int32 size_y = 3;
}

message Tile {
    Position position = 1;
    TileType type = 2;
    repeated EDirection walls = 4;
    StartPositionID start_position_id = 5;
}

message StartPositionID {
    uint32 id = 1;
}

enum ETileType {
    REGULAR = 0;
    NO_TILE = 1;
    CONVEYOR2 = 2;
    CONVEYOR3 = 3;
    ROTATOR = 4;
}

message TileType {
    ETileType type = 1;
    oneof fields {
        Conveyor2 conveyor2 = 3;
        Conveyor3 conveyor3 = 4;
        Rotator rotator = 5;
    }
}

message Conveyor2 {
    EDirection out = 1;
    EDirection input = 2;
    bool speed = 3;
}

message Conveyor3 {
    EDirection out = 1;
    repeated EDirection inputs = 2;
    bool speed = 3;
}

message Rotator {
    ERotationDir dir = 1;
}

enum ERotationDir {
    LEFT = 0;
    RIGHT = 1;
}

message Position {
    int32 x = 1;
    int32 y = 2;
}

message Player {
    uint32 id = 1;
    Robot robot = 2;
    repeated Register registers = 3;
    repeated MoveCard program_card_deck = 4;
    bool input_required = 5;
}

message Robot {
    uint32 id = 1;
    Position position = 2;
    EDirection direction = 3;
    uint32 damage = 4;
    uint32 life_tokens = 5;
}

message Register {
    MoveCard move_card = 1;
    bool locked = 2;
}

enum EDirection {
    NORTH = 0;
    EAST = 1;
    SOUTH = 2;
    WEST = 3;
}

message MoveCard {
    uint32 id = 1;
    uint32 priority = 2;
    repeated ESimpleMove moves = 3;
}

enum ESimpleMove {
    Forward = 0;
    Backward = 1;
    StepLeft = 2;
    StepRight = 3;
    
    TurnRight = 4;
    TurnLeft = 5;
    UTurn = 6;
}